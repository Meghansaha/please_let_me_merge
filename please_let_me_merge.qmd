---
title: "Please Let Me Merge Before I Start Crying"
subtitle: "And Other Things I've Said At The Git Terminal"
date: 2024-08-13
institute: ""
date-format: " "
format:
  revealjs: 
    slide-number: false
    width: 1690
    height: 1080
    margin: .2
    editor: source
    linkcolor: "#048781"
    highlight-style: github
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    transition: fade
    code-block-height: 1000px
css: "scripts/style.css"
title-slide-attributes: 
  data-background-image: "images/plmm.gif"
  data-background-size: "contain"
  data-background-position: "center"
  data-background-color: "#1a1a1a"
  data-notes: "As I've grown into my role as a Data Scientist, **I've said..**"
transition: fade
---

## I Can't Do This {.section-header background-image="images/1.png" background-size="contain" background-color="#1a1a1a"}


::: notes
... this phrase every time I've felt victimized by Git. But today, I come to you from the other side of the elusive second learning curve that comes with using Git. **You know, because**
:::

## Git's First Learning Curve {.section-header background-image="images/first_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
You have the initial challenge of just learning to use Git, **but then you have the..**
:::

## Git's Second Learning Curve {.section-header background-image="images/second_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..the additional mountain to climb when learning how to handle merges and conflicts so you can use it collaboratively. <br>

This talk today is geared towards those of you who may feel that you're
:::

## Git's Second Learning Curve {.section-header background-image="images/middle_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Right here in the middle.<br>
Maybe, you've figured out the basics of Git and have general knowledge of what merging in git is<br>
Maybe have even done a few merges already<br>
but might be a little hesitant like I once was to even deal with merge conflicts.<br>
Understanding Git merges and conflicts felt impossible at first, but it started to make sense when I realized that using Git collaboratively is alot like…
:::

## Git is like Driving {.section-header background-image="images/git_driving.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Driving.. So let me give an example<br> Last spring, I took a long road trip that I've done many times.<br> However, this time was different because it was the first time I was doing the drive with my teething baby and my well-meaning but slightly overbearing mother in tow. <br> For me, this scenario was similar to my experiences \***using git collaboratively...**
:::

## Long Road Trips Require Planning {.section-header background-image="images/prep_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..Just like I make compulsive packing lists **before my road trips...**
:::

## Collaborating With Git Requires Planning {.section-header background-image="images/prep_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
...I also make compulsive task lists to prepare myself for Git merges.
:::

## Road Trips are a Journey from Point A to Point B {.section-header background-image="images/travel_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Getting my precious cargo from point A to point B **on this road trip...**
:::

## Merging in Git is like a Journey from Point A to Point B {.section-header background-image="images/travel_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..felt like getting my precious code from my local computer to the **git repository via git merge...**
:::

## I Work well on Road Trips with my Husband {.section-header background-image="images/support_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
My supportive husband that I worked well with when parenting on this trip
:::

## My Team at the PCCTC and I work well outside of Git {.section-header background-image="images/support_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Could be considered any one of my awesome coworkers I usually work with outside of Git.
:::

## My Mom is well-meaning, smart, and just wants to help, even if too much {.section-header background-image="images/git_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Having my mother in the car, providing maybe a little too much **love and care to my baby...**
:::

## Git does so much on its own, and just wants to help, but can make the process hard sometimes {.section-header background-image="images/git_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
...felt like Git wanting to help me with my code, but actually creating more work for justified reasons.<br><br>
I was Stressed on this road trip. I knew how to take care of my baby and drive, but I suddenly felt like I had to learn these things all over again.
<br><br>
And honestly, I felt the same with Git. To understand how to work collaboratively with Git, I realized I needed to have a better understanding of it, because that lack of knowledge **lead me to say things like...**
:::

## Please Let Me Merge Before I Start Crying {.section-header background-image="images/2.png" background-size="contain" background-color="#1a1a1a"}


::: notes
These phrases stem from desperation and frustration <br>
Because we don't understand<br>
So before we talk about merges, conflicts, and collaboration let's talk about some **quick things we should understand about Git...**

:::

## Quick Things to Understand About Git {.content-header background-image="images/content_back_long.png" background-size="contain" background-color="#1a1a1a"}

::: content
-   Git ≠ GitHub
    -   Git: Version Control System 
    -   GitHub: Developer Platform that uses Git Software



:::{.fragment}
-   Three ways (R Users) can interact with Git
    -   A CLI Terminal
    -   The RStudio GUI | Positron w/ Extensions
    -   A Third Party Client (e.g. [GitHub Desktop](https://desktop.github.com/download/))
    
:::
:::

:::{.notes}
- not interchangeable<br>
- Briefly - touch on - GH personal workflow later..<br>
- SAY definitions<br>
- the fact that alot of people mix these words up is proof that<br>
- reliable ways to interact with git<br>
- Which for R Users are (click)<br>
- Command line interface

:::

## Do Whatever You want {.section-header background-image="images/dwyw.png" background-size="contain" background-color="#1a1a1a"}

:::{.notes}
- Github isn't the only platform
<br>
- DS card revoked - for Not using the terminal
<br>
- But just do what makes sense for your skills & sitch
<br>
Let's talk about the git merge.
:::


## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}


::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

![](images/git_merge1.png)

:::

:::



:::{.notes}

- Merges come in different flavors
<br>
- Usually via pushes
<br>
- when pushing new work up...and
<br>
:::

## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

![](images/git_merge2.png)
:::

:::

:::{.notes}
- pulls when pulling new work down<br>
- No matter the type, Merges -> important
- b/c allow for us to safely modify work when collaborating w/ others<br>
- That's all a merge is... so seems simple enough...<br>
- why scary?
:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}

:::

::: {.column width="50%"}
![](images/scary.png)
:::


:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}
<br><br><br>

<large>It's Not...</large>

:::

::: {.column width="50%"}
![](images/not_scary1.png)
:::


:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}
<br><br><br>

It's Not...
 
...No really

:::

::: {.column width="50%"}
![](images/not_scary2.png)
:::


:::

:::{.notes}
If scared of merges, might I suggest.. **scared of conflicts?**
:::
## People are afraid of git merge conflicts {.section-header background-image="images/conflict.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
- if so? that's ok. judgment-free zone
<br>
- I believe to start conquering fears
<br>
- Learn about what you're dealing with
<br>
- So let's take a moment to understand them 
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

“Competing changes are made to the same line of a file"

:::

::: {.column width="50%"}

:::

:::

<br><br>

<small>- [GitHub Docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line) *("Resolving a merge conflict using the command line")*</small>


::: {.notes}
- Occurs in..
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

“Competing changes are made to the same line of a file"

:::

::: {.column width="50%"}
"When someone edits a file and someone else deletes the same file.”
:::

:::

<br>

<small>- [GitHub Docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line) *("Resolving a merge conflict using the command line")*</small>


::: {.notes}
-To further contextualize
- Only 2
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

<center>
<span style="color:#063e9e;"><u>Content</u></span>
<br><br>
“<span style="color:#063e9e;">Competing changes</span> are made to the same <span style="color:#063e9e;">line of a file.</span>"
</center>

:::

::: {.column width="50%"}


:::

:::

:::{.notes}
- conflict in Actual content (lines of code)
:::


## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

<center>
<span style="color:#063e9e;"><u>Content</u></span>
<br><br>
“<span style="color:#063e9e;">Competing changes</span> are made to the same <span style="color:#063e9e;">line of a file.</span>"
</center>

:::

::: {.column width="50%"}
<center>
<span style="color:#801423;"><u>Structure</u></span>
<br><br>
"When someone <span style="color:#801423;">edits a file</span> and someone else <span style="color:#801423;">deletes the same file</span>.”
</center>

:::

:::

::: {.notes}

- conflicts w/ Modification/Deletion of folder itself<br>
- doesn't seem to scary at first glance<br>

- But, there has to be a reason people are afraid of merge conflicts<br>
- Let's actually look at simple scenario that was similar to something that happened at my job to see if these things are **really scary or not...**

- one day someone asked me to help resolve a conflict
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_1.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
So what had happened was:
<br>
two coworkers created local branches off master
<br>
all repos have a simple text config file with data cut dates in them
<br>
when started -> same vs of config file
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_2.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
- coworker 1 finishes<br>
- changed config file to go w/ work<br>
- pushes/merge np<br>
- meanwhile cw 2 in iteration hell w/ the orig vs.
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_3.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
when Cw2 finished, had to update config file<br>
THEIR version of the config file is different<br>
Now they have a merge conflict <br>
So, ok. we have the scenario, let's see what this conflict looks like in the code

:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

![](images/simple_ex_1_highlight.png)

![](images/simple_ex_2_highlight.png)

:::

:::{.notes}
- Both versions<br> (Repository and CoWorker # 2s)
- Content conflict - line 5 - > diff dates<br>
- so, when cw #2 attempted to merge, the resulting **conflict looked like...**
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master
vendor_1_data_cut: "2023-12-13"
vendor_2_data_cut: "2024-01-05"
vendor_3_data_cut: "2023-12-15"

```

::: {.notes}
If this is giving you anxiety, it's ok<br>
may help w/ anxiety -> every conflict<br>
3 components - no matter how complex
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"







```

::: {.notes}
Top of conflict is usually the branch/commit YOU are on and trying to merge<br>
Youll see conflict marker-  "less-than" signs (start of conflict)<br>
Then conflicted code on your branch
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======






```

::: {.notes}
- conflict divider (equal) which separates Your version of code..
:::


## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master




```

::: {.notes}
- From the version you are trying to merge into
<br>
- This case, master repository
<br>
last conflict marker (greater-than) signs -> end
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master
vendor_1_data_cut: "2023-12-13"
vendor_2_data_cut: "2024-01-05"
vendor_3_data_cut: "2023-12-15"

```
::: {.notes}
- Everything after that is code that is not conflicted, same of both vs, so left alone
<br>
So now that we know:
<br>- what happened and what the conflict looked like
<br> - how to resolve?
<br>- Well, when coworker # 2 came to me and asked me that
<br> I asked them...
<br> -their response was - **next slide...**
:::

## Oh {.section-header background-image="images/3.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
- cw2 didnt realize they just had to decide which date 
- saw conflict -> spooked
- and broke the 1st rule of dealing w/ conflicts which is:
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}
::: columns
::: {.column width="50%"}

<br><br><br>
<span id="callout">
1. Don't Panic
</span>

:::

::: {.column width="50%"}


<center>
![](images/dont_panic.png){width=100%}
</center>

:::
:::

:::{.notes}
Easier said than done<br>
biggest reason to **not panic is...**
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span id="midcallout">
1. Don't Panic
</span>

::: columns

::: {.column width="50%"}

  - Usually, conflicts aren't a big deal
  
:::{.incremental}
  - You are (hopefully) the expert
  - Walk away if you need to...
:::
:::

::: {.column width="50%"}
![](images/euc.jpg){width=100%}
:::
:::
:::

:::{.notes}
- have to remember -> you are XPT
- in that ex.. I had to ask which date<br>
- cw2 was expert and knew the answer...<br>
- Now, some ppl may panic b/c -> realize they can't do anything w/ git when conflict<br>
- so if not ready or calm you can (click)...<br>
- If rstudio use like myself.. 2 ways to "tuck and roll"
:::
## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns


::: {.column width="50%"}

<br><br>
`git merge --abort`

:::

::: {.column width="50%"}

![](images/rstudio_terminal.png){width=120% height=100%}
:::
:::
:::

:::{.notes}
- Rstudio -> no pretty icons for aborting merge<br>
- in rstudio tab or outside of it<br>
- type it directly<br>
- time machine<br>
- saved work - safe
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns


::: {.column width="50%"}

<br>
Have a Third Party handle it...

:::

::: {.column width="50%"}

![](images/abort_ghd.png){width=120% height=100%}

:::
:::
:::

:::{.notes}
- i.e: switch to ghd, to project repo -> pop-up and click<br>
- when ready to tackle, **2nd thing to do is..**
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns

::: {.column width="50%"}

<br><br><br>
<span id="callout">
2. Assess the Damage
</span>

:::

::: {.column width="50%"}


![](images/what.gif){width=100%}

:::

:::

:::{.notes}
- takes practice, but instinct after not panicking is to take a look<br>
- like i said, most aren't bad - could be simple.
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
:::

::: {.column width="50%"}
![](images/git_status.png){width=100%}
:::
:::
:::

:::{.notes}
git will usually tell you in the terminal what the problem is<br>
but `git status` works too
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
  - You can use the RStudio GUI
:::

::: {.column width="50%"}
![](images/git_status_gui.png){width=90%}
:::
:::
:::

:::{.notes}
- Rstudio git pane - status icons<br>
- **each icon means...**
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
  - You can use the RStudio GUI
:::

::: {.column width="50%"}
![](images/git_icons1.png){width=50%}
:::
:::
:::

:::{.notes}
- One you want to **look for is...**
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
  - You can use the RStudio GUI
:::

::: {.column width="50%"}
![](images/git_icons2.png){width=50%}
:::
:::
:::

:::{.notes}
quickly tells you
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
  - You can use the RStudio GUI
  - You can use a Third Party
:::

::: {.column width="50%"}
![](images/ghd_conflict_message.png){width=100%}
:::
:::
:::

:::{.notes}
- Want even more interaction - use a third party<br>
- if you're lucky... **you can even use**
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

<span id="midcallout">
2. Assess the Damage
</span>

::: columns

::: {.column width="50%"}
  - You can use the terminal via `git status`
  - You can use the RStudio GUI
  - You can use a Third Party
  - You can use a Developer Platform (sometimes)
:::

::: {.column width="50%"}
![](images/lucky_resolve.png){width=100%}
:::
:::
:::

:::{.notes}
- Trying to merge on platform via PR<br>
- instead of seeing "merge", may see this<br>
- conflict is simple enough to resolve on platform
:::


## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns

::: {.column width="50%"}

<br><br><br>
<span id="callout">
3. Choose Your Own Adventure
</span>

:::

::: {.column width="50%"}


![](images/reckless.gif){width=100%}

:::
:::

:::{.notes}
what do I mean? let's think back to ex...
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master
vendor_1_data_cut: "2023-12-13"
vendor_2_data_cut: "2024-01-05"
vendor_3_data_cut: "2023-12-15"

```
:::{.notes}
- When I asked cw 2 which date<br>
- important concept didn't realize<br>
- git was smart enough -> conflict
- but not smart enough to know how to resolve

:::
## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns


::: {.column width="50%"}

<br>

- You are in control!
- You can choose your code
- Or "their" code...

:::

::: {.column width="50%"}

![](images/choice_1.png){width=80%}
:::
:::
:::

:::{.notes}
- Thinking back to my xps ...I felt conflict markers made it obvi
- That git wanted me to pick one or the other...
- but Something I had a hard time wrapping my head around<br>
- what git was expecting of me ...<br>
- Like, literally How??<br>
- manually edit the file<br>
- let's look at ex of what git expects you to do..
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
![](images/code_snip1.gif){width=100%}
:::

:::{.notes}
- ~narrate what's happening here~<br>
- never realized this is what git wanted<br>
- the situation here is primitive...
- because git is relying on you to tell it what needs to move forward..

:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

![](images/choice_2.png){width=48%}

:::

:::{.notes}
- ~Don't linger here~
- You can literally fling yourself into the void
- You can make something completely new
- doesn't have to be one or the other
- you can leave the conflict markers in (code wont work)
- you can **even throw in...**
:::


## Anything Goes {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```{r, eval = FALSE, echo = TRUE}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣤⣤⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠖⣚⣩⣭⣥⣶⣶⣶⣶⣶⣶⣶⣬⣭⣙⣛⠲⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⢰⣮⣧⡀⠀⠀⠀⠀⣀⠴⢚⣩⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣛⢻⣿⣿⣿⣿⣿⣷⣮⣝⡳⢦⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⣿⣿⣿⣿⣦⣀⡴⢚⣵⣾⣿⣿⣿⣿⣿⢿⣟⣿⡽⣛⣭⡶⠿⢿⣿⣹⣿⣿⡿⣿⣿⣿⣿⣿⣿⣷⣜⡻⢦⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣯⣿⣿⣿⣿⡿⢫⣶⣿⣿⣿⣿⡿⣿⣽⣾⣿⡿⣽⡾⠛⠉⠀⠀⣼⣟⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⡿⠮⠿⠷⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣹⣿⣿⢟⣼⣿⣿⣿⣿⢿⣷⣿⣿⣟⣿⡿⣿⣿⣦⣄⠀⠀⢠⣿⣽⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡾⣛⢻⣾⣿⣿⡿⣿⣾⣿⣿⣽⣾⣿⣟⣿⣿⣻⣿⣿⣷⣀⣾⢿⣿⣿⡿⣿⣿⣿⣿⣳⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣇⣿⣿⣟⣿⣿⣯⣷⣿⡿⣯⣷⣿⣿⣻⣿⣷⣿⣿⣿⣿⣿⣿⡿⣿⣿⣷⣿⣿⣿⣷⣝⢦⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⠟⣿⣹⣿⢿⣻⣷⣿⣿⣽⣿⡿⣿⡿⢛⣩⣤⣦⣭⡻⣷⣿⣿⣻⣿⢿⣷⡿⣿⣾⡿⣿⣿⣷⡝⢦⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⣿⣿⣻⣿⣿⢿⣷⣿⣻⣷⡿⣣⣾⣿⠟⠛⠻⣿⣿⣿⣿⣽⣿⢿⣿⣻⣿⡿⣷⣿⣿⢿⣿⣿⣦⠳⡄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠸⣿⣿⣿⣾⣿⣿⣽⣿⢯⣿⠟⠋⠀⠀⠀⠀⠘⣿⣿⣾⣿⣻⣿⣿⣟⣿⣿⢿⣯⣿⣿⢿⣿⣿⣧⠹⡄⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢹⣿⢿⣿⣿⣾⢟⣽⠟⠁⢀⡶⡀⠀⠀⠀⢰⣿⣿⣷⣿⢿⣟⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⣿⣿⣇⢳⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠈⡧⣾⡶⣿⡿⢭⣫⢵⠟⠁⠀⠀⣼⣿⡇⠀⠀⢠⣿⣿⣿⣾⣿⡿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣷⣿⣿⣿⣿⡈⣇⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣠⣀⠀⠀⠀⠀⢀⠞⠁⠈⢱⠀⠀⢳⡈⠻⢾⣷⠉⠒⠠⣀⠀⠀⠀⢿⣿⠀⢀⠴⠿⢿⣿⣯⣷⣿⣿⢿⣷⣿⣿⣷⡽⣿⢿⣿⣿⣿⣽⣿⣿⡇⣿⠀
⠀⠀⠀⠀⠀⢠⠞⡁⠄⠀⠙⣆⠀⡰⠃⠀⠀⡀⡼⠀⠀⠀⠙⢤⡀⠀⠀⠀⠀⠀⠉⠀⠒⠚⠃⠈⢠⣶⠀⣼⣿⣿⣿⣿⣾⣿⣿⣽⣾⣿⣷⡝⣆⠈⠛⢿⣿⣿⣿⣗⣸⡀
⠀⠀⠀⡠⠖⠾⡆⡀⠀⠀⠀⢸⠋⠀⠀⠀⣐⡤⠃⠀⠀⠀⠀⠀⠉⠲⢤⣀⠀⠀⠀⠀⠤⠄⠐⠒⣁⣤⣾⣿⣿⣿⣿⣷⣿⢿⣾⡿⣟⣿⣿⣿⠸⡆⠀⠀⠙⢿⣿⣷⢸⡇
⠀⢀⠞⡀⠁⠐⣷⠰⠀⠀⠀⠀⡄⠀⢀⠵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠽⢿⡶⣶⣶⣾⣿⡟⢻⣻⣿⠿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⡇⢿⠀⠀⠀⠀⠹⣿⢼⡃
⠀⢘⣆⠃⠀⠀⠘⣆⠆⠀⠀⠀⣇⠔⣯⡄⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⢋⠀⠀⠀⠙⠶⣽⣿⣿⣧⣆⡴⠋⠓⡬⡛⢿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⢸⡄⠀⠀⠀⠀⠈⠿⠀
⡔⠁⠘⣄⠀⠀⠀⠘⡌⠄⠀⠀⣸⢠⠰⠧⡀⠀⠀⠀⢀⣠⣖⡫⣵⠣⠁⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣷⣄⠀⠈⠊⢢⡍⠻⢿⣿⣿⣷⣿⣿⣿⣿⢘⡇⠀⠀⠀⠀⠀⠀⠀
⢧⠀⠀⠈⠂⡀⠀⠀⠈⠒⣤⠾⣡⢎⠂⢠⡗⠒⠒⠋⠅⠀⣹⣴⠇⠂⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡏⠀⢀⢠⠃⠀⠀⠉⢿⣿⣿⣽⣿⣿⢸⡇⠀⠀⠀⠀⠀⠀⠀
⢈⠷⣄⠀⠀⠈⠒⠤⡄⣴⣥⠶⠣⠟⢀⡞⡇⠀⠀⠀⣀⡴⠋⢹⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡿⠿⣛⡟⠀⠀⣊⡞⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⢸⡇⠀⠀⠀⠀⠀⠀⠀
⠸⡀⠀⠒⠀⠤⠤⣤⢳⣡⡏⠀⠀⢀⠾⠾⠖⠒⠚⠋⠁⠀⠀⢸⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣻⡇⠀⠻⢦⣀⣈⣼⡳⡄⠀⠀⠀⠀⠀⠈⢿⣿⡏⣾⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠉⠒⠦⠤⠤⠤⠞⠛⠶⠾⠒⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣦⣀⣀⣤⣾⣿⣿⣿⢿⡟⣿⠋⢆⠀⠀⠈⠉⠉⢀⡇⠀⠀⠀⠀⠀⠀⠈⢻⣟⡟⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢻⣿⣿⣿⣿⢿⣯⣿⢺⣤⣿⢦⡀⠀⠀⠰⠦⠉⢹⠦⡄⠀⠀⠀⠀⠀⠀⠀⠻⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣾⣿⣿⣿⣾⣿⣿⣿⡟⣿⡿⢄⠈⠳⠦⣤⣀⡴⠋⣱⡘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⣿⣿⣿⡍⢻⣿⣽⣿⣹⡇⠈⠠⠀⠀⠀⠉⢡⠊⢀⣹⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣽⣿⣿⡇⠈⢿⣿⣿⣷⡇⠀⠀⠀⠀⠀⠀⠀⢣⠊⠀⢸⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣟⣿⣿⣿⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣻⡇⠀⢹⣿⣾⣿⡇⠀⠀⠀⠀⠀⠐⠁⠃⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡿⣿⣿⣿⡀⠈⣿⣿⣿⣿⣤⣀⠀⠀⠀⣀⡠⠤⠚⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⣿⣿⢿⣇⠀⢸⣿⣿⢿⣷⢻⠉⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣹⣿⣿⣿⡦⠤⢿⣿⣿⣿⣧⢣⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢡⣜⣏⣿⣿⣽⣿⣦⡽⣿⣿⢿⣿⣎⢧⡌⠉⠑⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡇⠀⠈⠉⠛⠛⠛⠉⡝⠁⣰⣹⣿⣿⣿⣿⣾⣿⡗⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠒⠤⣀⠀⠀⠀⡼⡆⡀⠙⠻⠿⠿⠿⠿⠟⠋⠀⠄⡼⠧⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⣀⠴⢇⠀⠤⠐⠛⠂⠀⠑⡵⣤⢀⡀⠀⠀⠀⠀⠀⢀⣔⡉⠀⡀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⣪⣑⣈⠀⠀⠈⠫⡒⠤⠤⠤⠤⣴⣶⡇⠀⠠⠵⠂⠀⠀⠀⠀⠈⠀⢐⣠⣞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣵⣾⡿⣟⣿⣻⣷⣦⣄⠀⠑⠢⡀⠀⠘⣿⣿⣦⣄⣀⣠⣤⣤⣤⠴⠒⠉⢁⣀⣈⡙⢿⡳⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣻⢾⣽⣟⡷⣟⣾⡽⣯⣧⡀⠀⠘⣄⢂⢻⣿⣟⣿⣻⢯⣟⠟⠁⠉⠉⠉⠀⠀⠀⠀⠀⠉⠳⡙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⡿⣽⣞⣯⣿⣳⣯⢿⣻⣽⣻⣽⣻⡇⠀⢠⣇⣎⢼⣿⣿⣳⣿⣻⡟⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣾⢿⣿⣦⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡿⣯⣿⣽⢾⣻⡾⣽⢯⣿⣯⡷⠿⠷⣛⣷⣠⣃⣤⣴⣾⢯⡻⢷⣯⣿⠀⠀⠀⠀⠀⠀⢠⣾⣟⣯⣷⣟⡿⣾⡽⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⡛⠦⢭⣉⣉⣉⡩⠭⠭⠤⠖⠒⠛⣉⣉⣭⡾⠿⠛⠛⠛⢦⣙⠧⣍⣿⢀⠀⠀⠀⠀⢀⣿⣟⣾⣻⢾⣽⣻⢷⣿⣳⣯⣿⣆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠲⠤⠤⠤⠴⠒⠒⠒⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⢮⡙⠢⣈⠂⠄⠀⢸⣿⣞⣯⢿⣯⡷⣿⣻⣾⣽⣳⣯⣿⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⢤⣉⠒⠄⣿⠛⠾⢿⣻⣾⣽⢷⣟⡾⣷⣻⢷⣻⣷⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠢⢤⣉⠓⠲⠤⣉⡙⠛⠚⠛⠛⢛⣫⡵⣋⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠒⠤⠤⢭⣉⣉⣙⣩⡥⠶⠋⠀⠀⠀⠀⠀
```

:::{.notes}
- the code that broke crowdstrike last month<br>
- ASCII art for a little razzle dazzle if ya want<br>
- When you have to resolve a conflict ANYTHING GOES
:::

## Resolving Git Merge Conflicts {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

:::{.fragment .strike fragment-index=1}
Don't Be Scared
:::

:::{.fragment fragment-index=1}
Be Careful...
:::

:::{.notes}
- Some of you thinking.. we used an overly easy ex<br>
- *20 mins ain't alot of time.*<br>
- Yall come up here and do a more complicated conflict -.- <br>
- believe me..doesn't matter how complicated, process is the same<br>
- What makes the process hard or not -> little to do with Git<br>
- But everything to do with how you prep and plan your work<br>
- When you finally realize that, and plan accordingly, **you'll start to say things like..**
:::

## Maybe This Won't Be So Bad {.section-header background-image="images/4.png" background-size="contain" background-color="#1a1a1a"}

:::{.notes}
- one of the hardest pills to **swallow was realizing...**<br>
- spent time being scared
- need to be scared of ME (flows and process)
- You may not realize..
:::

## Conflicts are Not Git Problems {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

Merge conflicts are not Git problems

:::{.fragment}
They are...
:::

<center>

:::{.fragment}
Communication Problems<br>
:::

:::{.fragment}
Workflow Problems<br>
:::

:::{.fragment}
Knowledge Gap Problems
:::

</center>

:::

:::{.notes}
- Cycle thru the frags (the below notes come after - work/proc)<br>
- You can probably never completely avoid conflicts working w/ others<br>
- But you can lessen the frequency and severity of them<br>
- Not a lot of time left -> can't go in depth<br>
- hope I can plant the seed -> inspire you to think critically<br>
- Anything highlighted is a link to a resource and is on my github
:::


## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns
::: {.column width="50%"}
<span class="callout">
Communication
</span>
:::

::: {.column width="50%"}
![](images/communication.gif){width=100%}
:::
:::
:::

:::{.notes}
- Collabing requires good communication
- Just like we (hopefully) comm w/ others while driving (signaling)
- 'Good Communication' can look like a lot of things<br>
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Talking with others before doing any work
   - <span class="highlight">Who</span> is doing what
   - <span class="highlight">What</span> is being done
   - <span class="highlight">When</span> is it being done
   - <span class="highlight">Where</span> is it being done
   - <span class="highlight">Why</span> is it being done

:::

:::{.notes}
- reduces miscommunication
- allows for a plan about workflow/review process
:::


## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Following a universally accepted naming/styling convention for your codebase
   - Intentional and consistent names for objects and consistent formatting
       - ["Column Names as Contracts"](https://www.emilyriederer.com/post/column-name-contracts/) - Emily Riederer
       - ["Tidyverse Style Guide"](https://style.tidyverse.org/index.html)
       - ["Google Style Guides"](https://google.github.io/styleguide/)
:::

:::{.notes}
- make sure everyone styling the same <br>
- sucks having a conflict due to whitespace/formatting

:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

Annotate your code with headers, comments, and code sections

  - [Code Sections - R Studio User Guide](https://docs.posit.co/ide/user/ide/guide/code/code-sections.html)
    
  - Good things to annotate:
     - High-level description of outputs
     - Complicated wrangling operations
     - Contextual information
     - Justification of programming decisions

:::

:::{.notes}
- obv, not everything but list of some things:<br>
- annotation isn't something that directly reduces conflict<br>
- But clear intention in code does<br>
- ex: when you want one part of code untouched if you are working on something
- if you need to see an example
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```{r echo = TRUE}
#=============================================#
# A Section Header-----------------------------
#=============================================#

# A Comment that explains the section below#

## A Subsection Header-------------------------

# A Comment that explains the section below#

### A Sub-Subsection Header--------------------
```

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Use packages to help with styling and styling validation
    - [`styler`](https://styler.r-lib.org/) package
    - [`linter`](https://lintr.r-lib.org/index.html) Package
:::

:::{.notes}
- also packages can help with styling<br>
- styler has functions to automatically style files<br>
- linter helps to validate that a file is styled properly
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)

![](images/gh_template.png)
    
:::

:::{.notes}
- My team uses github extensively<br>
- PR templates to make it easier to give details about work (auto pop - conversation tab when PR created)<br>
- can insert checklists to ensure things are done before merging
:::
## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
    - ["Managing labels"](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)


![](images/gh_labels.png)
    
:::

:::{.notes}
- My team can tell you how colorful my repositroies are on GH b/c labels<br>
- create tags for anything<br>
- perfect for organizing needs, status, and context
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
    - ["Managing labels"](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)
    - ["About GitHub Issues"](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)


![](images/gh_issues.png)
    
:::

:::{.notes}
- Issues are a parking lot - so everyone aware
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
    - ["Managing labels"](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)
    - ["About GitHub Issues"](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
    - ["Use Comments in Pull Requests"](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)



![](images/gh_pr_2.png){width=50%}
    
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
    - ["Managing labels"](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)
    - ["About GitHub Issues"](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
    - ["Use Comments in Pull Requests"](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)



![](images/gh_pr_1.png)
    
:::

:::{.notes}
- I treat it as a transcript/manifest what in the PR<br>
- Any relevant external stuff that happened too
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="midcallout">
Communication
</span>

- Leverage Developer Platforms
    - ["Creating GitHub Pull Request Templates"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
    - ["Managing labels"](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)
    - ["About GitHub Issues"](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
    - ["Use Comments in Pull Requests"](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)
    - ["Use Branch Rules and Protection"](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule)


![](images/gh_rules.png){width=50%}
    
:::

:::{.notes}
- Branch protection rules - communicate that someone attempted to go against intended workflow<br>
- strong way to ensure work progresses as intended<br>
- predictability/reliablity can limit conflicts
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns
::: {.column width="50%"}
<span class="callout">
Workflow
</span>
:::

::: {.column width="50%"}
![](images/workflow.gif){width=100%}
:::
:::
:::


## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Workflow
</span>

Be thoughtful about how to <span class="highlight">start</span>, <span class="highlight">do</span>, and <span class="highlight">end</span> your coding sessions

  - To <span class="highlight">Start</span>:
    - Emergencies aren't real 🤷🏾
    - Check staged commits and/or stashes
    - Consider using the [`usethis` package](https://usethis.r-lib.org/index.html)'s [Git functions](https://usethis.r-lib.org/reference/index.html#git-and-github)
  
:::

:::{.notes}
- First off, Don't be bullied into getting flustered for "emergencies"<br>
- usethis -> helpful when working with PRs <br>
- nice features like ensuring you're branching off of master/main and other things
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Workflow
</span>

Be thoughtful about how to <span class="highlight">start</span>, <span class="highlight">do</span>, and <span class="highlight">end</span> your coding sessions

  - To <span class="highlight">Start</span>:
    - Work in line with your team's preferred [Git Workflow](https://www.atlassian.com/git/tutorials/comparing-workflows)
    - Play Hot Potato if possible
    - Confirm that branches are ready to be pulled
    - **ALWAYS** pull first before touching **ANYTHING**
  
:::

:::{.notes}
- Probably the best way to mitigate a lot of conflicts, pulling before doing anything!
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Workflow
</span>

Be thoughtful about how to <span class="highlight">start</span>, <span class="highlight">do</span>, and <span class="highlight">end</span> your coding sessions

  - To <span class="highlight">Do</span>:
    - Commit Often, Push Thoughtfully
    - Keep commits informative, add amendments to keep them clean
    - Use [git stashes](https://www.atlassian.com/git/tutorials/saving-changes/git-stash) when there's ✌🏾emergencies✌🏾 
  
:::

:::{.notes}
- large projects should be broken down<br>
- but related tasks youd put in sep commits can just be in one with amendments<br>
- Itll make for clean history, and ensure there's no stragglers for someone else<br>
- Stashes are great for unfinished work that doesnt meet your team's workflow standards yet
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Workflow
</span>

Be thoughtful about how to <span class="highlight">start</span>, <span class="highlight">do</span>, and <span class="highlight">end</span> your coding sessions

  - To <span class="highlight">Do</span>:
    - Lean into spatial awareness and reasoning
    - Use tools to make it easier if you'd like
      - [GitHub Desktop](https://desktop.github.com/download/)
      - [GitKraken](https://www.gitkraken.com/)
      - [Sourcetree](https://www.sourcetreeapp.com/)
    
:::

:::{.notes}
- Be spatially aware of where you are in work<br>
- any PRs dependent on your work<br>
- you waiting for PRs?<br>
- will you have to merge multiple branches together before rolling into repository?
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Workflow
</span>

Be thoughtful about how to <span class="highlight">start</span>, <span class="highlight">do</span>, and <span class="highlight">end</span> your coding sessions

  - To <span class="highlight">End</span>:
    - Leave nothing behind
    - You are Reviewer #1
    - Ensure your work is user-friendly
    - Leave a decent paper trail
    
:::


:::{.notes}
- Big way to avoid conflicts is to leave no trace when done<br>
- Before sending code to some else, check it yourself and sleep on it if able<br>
- ensure your work is clear, reproducible, and documented by.. (last two bulls)<br>
- maybe you need to learn more about git <br>
- Use rstudio w/o terminal - limited in git fxs 
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

::: columns
::: {.column width="50%"}
<span class="callout">
Knowledge
</span>
:::

::: {.column width="50%"}
![](images/knowledge.gif){width=100%}
:::
:::
:::


## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Knowledge
</span>

- Learn what you need to, how you need to: <span>(Readers)</span>
  - [Git Reference Manual](https://git-scm.com/docs)
  - [Git Pro Book](https://git-scm.com/book/en/v2) - Scott Chacon and Ben Straub
  - [Happy Git with R](https://happygitwithr.com/) - Jenny Bryan

:::

:::{.notes}
Learn how you need to, so if you read...
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Knowledge
</span>

- Learn what you need to, how you need to: <span>(Doers)</span>
  - [saperlipopette Package](https://maelle.github.io/saperlipopette/index.html) - Maelle Salmon
  - [Learn Git Branching Site](https://learngitbranching.js.org/) - Peter Cottle
  - [Oh My Git Game](https://ohmygit.org/) - bleeptrack and blinry

:::

:::{.notes}
If you need to actually do things to learn (best way in my xp)<br>
- package: SAH-PEAR-LEE-POO-PET - (MAI-EllE SAH-MOLN) - practice various git operations on your system<br>
- LGB - interactive site to learn about branching in git
- OMG - open source game - learning git
:::

## Git Conflict Mitigation {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content
<span class="callout">
Knowledge
</span>

- Learn what you need to, how you need to: <span>(Skimmers)</span>
  - [Oh S%@t Git](https://ohshitgit.com/) | [Oh Danggit Git](https://dangitgit.com/en) - Katie Sylor-Miller
  - [RStudio/Git/GitHub Cheat Sheet](https://rstudio.github.io/cheatsheets/git-github.pdf)
  - [GitHub Git Cheat Sheet](https://education.github.com/git-cheat-sheet-education.pdf)
  - [Practical Git](https://practicalgit.com/) - Foad Lind

:::

:::{.notes}
If you ain't got time for all that, there's good sources to skim too<br><br>
So I know I just threw so much information at you all, but like I said,
I hope that when you're back home, you'll return to these resources
and take the time to consider what may work for you and your team.
<br><br>
My hope would be that you'd gradually improve your communication, workflows, and overall knowledge with the goal of eventually getting to a point where you see a merge conflict and say...
:::

## I Got This {.section-header background-image="images/5.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
Because, just like with parenting, travelling, and most difficult things in life, there's no tried and true method to success that anyone can just follow. This is especially true when learning how to resolve merge conflicts. You'll find plenty of resources explaining the basic concept of merge conflict resolution, but it's a tricky thing to teach because while most conflicts are simple, all of them require some type of contextual knowledge. The only reliable method to learning how to resolve merge conflicts is through preparation, practice, and exposure.<br>
But for those of you that have been afraid of merge conflicts, or are still afraid, I know that this.. (click)
:::

## {.section-header background-image="images/1_end.png" background-size="contain" background-color="#1a1a1a" }

::: {.notes}
...chaotic scene is probably what it feels like when you run into a conflict right now, but if you take the time to let the...
:::

## {.section-header background-image="images/2_end.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
dust settle and regain your bearings, you and your team can start preparing to work more efficiently
:::

## {.section-header background-image="images/3_end.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
And eventually, each time you run into a merge conflict...
:::

## {.section-header background-image="images/4_end.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
It will be less scary, until suddenly..
:::

## {.section-header background-image="images/5_end.png" background-size="contain" background-color="#1a1a1a"}


::: {.notes}
...you'll realize you don’t have to plead with git to let you merge anymore because with confidence, caution, and care, You *do* have the power to control the journey your work takes to get to... 
:::

## {.section-header background-image="images/beach.png" background-size="contain" background-color="#1a1a1a"}

:::{.notes}
...it's destination. Thank You.
:::