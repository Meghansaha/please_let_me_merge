---
title: "Please Let Me Merge Before I Start Crying"
subtitle: "And Other Things I've Said At The Git Terminal"
date: 2024-08-13
institute: ""
date-format: " "
format:
  revealjs: 
    slide-number: false
    width: 1690
    height: 1080
    margin: .2
    editor: source
    linkcolor: "#048781"
    highlight-style: github
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    transition: fade
    code-block-height: 1000px
css: "scripts/style.css"
title-slide-attributes: 
  data-background-image: "images/plmm.gif"
  data-background-size: "contain"
  data-background-position: "center"
  data-background-color: "#1a1a1a"
  data-notes: "As I've grown into my role as a Data Scientist, **I've said..**"
transition: fade
---

## I Can't Do This {.section-header background-image="images/1.png" background-size="contain" background-color="#1a1a1a"}


::: notes
... this phrase every time I've felt victimized by Git. But today, I come to you from the other side of the elusive second learning curve that comes with using Git. **You know, because**
:::

## Git's First Learning Curve {.section-header background-image="images/first_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
You have the initial challenge of learning to just use Git, **but then you have the..**
:::

## Git's Second Learning Curve {.section-header background-image="images/second_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..the additional mountain to climb when learning how to handle merges and conflicts so you can use it collaboratively. <br>

So this talk today is geared towards those of you who may feel that you're
:::

## Git's Second Learning Curve {.section-header background-image="images/middle_curve.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Right here in the middle.<br>
Maybe, you've figured out the basics of Git and have general knowledge of what merging in git is<br>
but might be a little hesitant like I once was to even deal with git merges or conflicts.
<br>
Understanding Git merges and conflicts felt impossible at first, but it started to make sense when I realized that using Git collaboratively is alot like…
:::

## Git is like Driving {.section-header background-image="images/git_driving.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Driving.. So let me give an example<br> Last spring, I took a long road trip that I've done by myself and with my husband many times.<br> However, this time was different because it was the first time doing the drive with my teething baby and my well-meaning but slightly overbearing mother in tow. <br> For me, this scenario was similar to my experiences \***using git collaboratively...**
:::

## Long Road Trips Require Planning {.section-header background-image="images/prep_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..Just like I have the urge to make compulsive packing lists **before my road trips...**
:::

## Collaborating With Git Requires Planning {.section-header background-image="images/prep_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
...I also make compulsive task lists to prepare myself for Git merges.
:::

## Road Trips are a Journey from Point A to Point B {.section-header background-image="images/travel_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Getting my precious cargo from point A to point B **on this road trip...**
:::

## Merging in Git is like a Journey from Point A to Point B {.section-header background-image="images/travel_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
..felt like getting my precious code from my local computer to the **git repository via git merge...**
:::

## I Work well on Road Trips with my Husband {.section-header background-image="images/support_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
My supportive husband that I worked well with when parenting on this trip
:::

## My Team at the PCCTC and I work well outside of Git {.section-header background-image="images/support_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Could be considered any one of my awesome coworkers I usually work with outside of Git.
:::

## My Mom is well-meaning, smart, and just wants to help, even if too much {.section-header background-image="images/git_1.png" background-size="contain" background-color="#1a1a1a"}

::: notes
Having my mother in the car, providing maybe a little too much **love and care to my baby...**
:::

## Git does so much on its own, and just wants to help, but can make the process hard sometimes {.section-header background-image="images/git_2.png" background-size="contain" background-color="#1a1a1a"}

::: notes
...felt like Git wanting to help me with my code, but actually creating more work for justified reasons.<br><br>
As you can probably guess, I was Stressed on this road trip. I knew how to take care of my baby and drive, but I suddenly felt like I had to learn these things all over again.
<br><br>
And honestly, I felt the same with Git. To understand how to work collaboratively with Git, I realized I needed to have a better understanding of it, because that lack of knowledge **lead me to say things like...**
:::

## Please Let Me Merge Before I Start Crying {.section-header background-image="images/2.png" background-size="contain" background-color="#1a1a1a"}


::: notes
These phrases stem from desperation and frustration <br>
Because we don't understand<br>
So before we talk about merges, conflicts, and collaboration let's talk about some **quick things we should understand about Git...**

:::

## Quick Things to Understand About Git {.content-header background-image="images/content_back_long.png" background-size="contain" background-color="#1a1a1a"}

::: content
-   Git ≠ GitHub
    -   Git: Version Control System 
    -   GitHub: Developer Platform that uses Git Software



:::{.fragment}
-   Three ways (R Users) can interact with Git
    -   A CLI Terminal
    -   The RStudio GUI
    -   A Third Party Client (e.g. [GitHub Desktop](https://desktop.github.com/download/))
    
:::
:::

:::{.notes}
- Github is synonymous with Git, But they are not interchangeable<br>
- Point this out (I've made this mistake)<br>
- GH personal workflow comes later...but<br>
- SAY definitions<br>
- the fact that alot of people make this mistake is proof that<br>
- Alot of reliable ways to interact with git<br>
- Which for R Users are (click)<br>
- Command line interface/Terminal<br>
- I want you to all know that...

:::

## Do Whatever You want {.section-header background-image="images/dwyw.png" background-size="contain" background-color="#1a1a1a"}

:::{.notes}
- DWYW<br>
- Github isn't the only thing
<br>
- DS card being revoked for Not using the terminal
<br>
- I use all 3 because there are some things that can't be done say in rstudio or github desktop
<br>
- But just do you

So now that that's out the way, let's talk about the git merge.
:::

## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}


::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

:::

:::

:::{.notes}
- development history == "A Branch"
<br>
- Merges come in different flavors
<br>
- Usually via pushes and pulls
<br>
- some types more common
<br>

:::

## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}


::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

![](images/git_merge1.png)

:::

:::



:::{.notes}

<br>
- One of the most common
<br>
- Pushing new work from our local to repo
:::

## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

![](images/git_merge2.png)
:::

:::

:::{.notes}
<br>
- another common one
<br>
- Pulling new work from repo to local
:::

## What is a Git Merge? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}

<br><br>
"Join two or more development histories *(Branches)* together"

<br><br>

<small>[Git Merge Docs](https://git-scm.com/docs/git-merge) *("Git - git-merge Documentation")*</small>

:::

::: {.column width="50%"}

![](images/git_merge3.png)
:::

:::



:::{.notes}

- merging of two local files w/o repo interaction
<br>
What's important:<br>
- No matter the merge
<br>
- essential -> Git's functionality of version control when collaborating
<br>
- and it allows safe modifications or additions to work
<br>
- Honestly, That's all a merge is...<br>
-At face value this seems simple<br>
<br>So if a merge is **simple in theory...**
:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}

:::

::: {.column width="50%"}
![](images/scary.png)
:::


:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}
<br><br><br>

<large>It's Not...</large>

:::

::: {.column width="50%"}
![](images/not_scary1.png)
:::


:::

## Why is a Git Merge Scary? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: columns
::: {.column width="50%"}
<br><br><br>

It's Not...
 
...No really

:::

::: {.column width="50%"}
![](images/not_scary2.png)
:::


:::

:::{.notes}
If scared of merges, might I suggest.. **scared of conflicts?**
:::
## People are afraid of git merge conflicts {.section-header background-image="images/conflict.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
- I believe to start conquering fears
<br>
- Learn about what you're dealing with
<br>
- So let's take a moment to understand them 
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

“Competing changes are made to the same line of a file"

:::

::: {.column width="50%"}

:::

:::

<br><br>

<small>- [GitHub Docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line) *("Resolving a merge conflict using the command line")*</small>


::: {.notes}
- Two types of conflicts
- content
- structural 
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

“Competing changes are made to the same line of a file"

:::

::: {.column width="50%"}
"When someone edits a file and someone else deletes the same file.”
:::

:::

<br>

<small>- [GitHub Docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line) *("Resolving a merge conflict using the command line")*</small>


::: {.notes}
- Two types of conflicts
- content
- structural 
:::

## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

<center>
<span style="color:#063e9e;"><u>Content</u></span>
<br><br>
“<span style="color:#063e9e;">Competing changes</span> are made to the same <span style="color:#063e9e;">line of a file.</span>"
</center>

:::

::: {.column width="50%"}


:::

:::

:::{.notes}
- Two types of conflicts<br>
- content: conflict in Actual content (lines of code)
:::


## What is a Git Merge Conflict? {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

<br><br>

::: columns

::: {.column width="50%"}

<center>
<span style="color:#063e9e;"><u>Content</u></span>
<br><br>
“<span style="color:#063e9e;">Competing changes</span> are made to the same <span style="color:#063e9e;">line of a file.</span>"
</center>

:::

::: {.column width="50%"}
<center>
<span style="color:#801423;"><u>Structure</u></span>
<br><br>
"When someone <span style="color:#801423;">edits a file</span> and someone else <span style="color:#801423;">deletes the same file</span>.”
</center>

:::

:::

::: {.notes}

- structure: conflicts w/ Modification/Deletion of folder itself<br>
- doesn't seem to scary at first glance<br>
- Personally, when broken down like this, I don't think it's too bad<br>
- But, there has to be a reason we're all so afraid of merge conflicts<br>
- Let's actually look at simple scenario first to see if these things are **really scary or not...**
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_1.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
I work at a CRO (Clinical Research Organization) does work for Prostate Cancer
<br>
Recently had a situation where someone was advised to ask me for help resolving a conflict.
<br>
So what had happened was:
<br>
each study has it's own repo
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_2.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
One for report
<br>
One for a plot
:::
## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_3.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
In our org, each study has a configuration file. The one here held dates for data cuts
<br>
So even though different deliverables
<br>
Same config file used
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_4.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
After some time
<br>
coworker 1 is finished
<br>
And changed the config file to make their report run
:::

## Simple Merge Conflict Example {.section-header background-image="images/conflict_vis_5.png" background-size="contain" background-color="#1a1a1a"}

::: {.notes}
Pushed up and merged
<br>
Now master's config file is coworker 1's version
<br>
Meanwhile poor coworker #2 is going through iteration hell

Coworker 2 is finally finished
<br>
So much time passed, config file is different
<br>
Now they have a merge conflict
<br>
So, ok. we have the scenario, let's see what these conflicted config files look like
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

![](images/simple_ex_1.png)


:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

![](images/simple_ex_1.png)

![](images/simple_ex_2.png)

:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

::: content

![](images/simple_ex_1_highlight.png)

![](images/simple_ex_2_highlight.png)

:::


## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master
vendor_1_data_cut: "2023-12-13"
vendor_2_data_cut: "2024-01-05"
vendor_3_data_cut: "2023-12-15"

```

::: {.notes}
The actual conflict
<br>
If this is given you bad feels, it's ok
<br>
every Git Merge conflict consists of 3 components
<br> we can pull out here
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"







```

::: {.notes}
Usually the HEAD (which is the branch you are actively on and trying to merge into something else)
<br>
then a conflict marker that has "less-than" signs (start of conflict)
<br>
This example: Coworker # 2s branch
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======






```

::: {.notes}
- conflict divider which separates Your version of code..
:::


## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master




```

::: {.notes}
- From the version you are trying to merge into
<br>
- This case, master/Coworker # 1's modifications
<br>
conflict ends - last conflict marker (greater-than) signs
:::

## Simple Merge Conflict Example {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```yaml
#=============================#
# Data Cut Dates---------------
#=============================#

<<<<<<< HEAD
main_data_cut: "2024-06-01"
=======
main_data_cut: "2024-01-01"
>>>>>>> master
vendor_1_data_cut: "2023-12-13"
vendor_2_data_cut: "2024-01-05"
vendor_3_data_cut: "2023-12-15"

```
::: {.notes}
- Everything after that is code that is not conflicted, so left alone
<br>
So now that we know:
<br>- what happened
<br>- and what the symbols and everything means
<br>- How do we resolve the conflict?
<br>- Well, when coworker # 2 came to me and asked me that
<br> I responded : "Which date do you want?"
<br> -their response was - **next slide...**
:::

## Oh {.section-header background-image="images/3.png" background-size="contain" background-color="#1a1a1a"}


## Go into the void {.content-header background-image="images/content_back.png" background-size="contain" background-color="#1a1a1a"}

```{r, eval = FALSE, echo = TRUE}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣤⣤⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠖⣚⣩⣭⣥⣶⣶⣶⣶⣶⣶⣶⣬⣭⣙⣛⠲⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⢰⣮⣧⡀⠀⠀⠀⠀⣀⠴⢚⣩⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣛⢻⣿⣿⣿⣿⣿⣷⣮⣝⡳⢦⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⣿⣿⣿⣿⣦⣀⡴⢚⣵⣾⣿⣿⣿⣿⣿⢿⣟⣿⡽⣛⣭⡶⠿⢿⣿⣹⣿⣿⡿⣿⣿⣿⣿⣿⣿⣷⣜⡻⢦⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣯⣿⣿⣿⣿⡿⢫⣶⣿⣿⣿⣿⡿⣿⣽⣾⣿⡿⣽⡾⠛⠉⠀⠀⣼⣟⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⡿⠮⠿⠷⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣹⣿⣿⢟⣼⣿⣿⣿⣿⢿⣷⣿⣿⣟⣿⡿⣿⣿⣦⣄⠀⠀⢠⣿⣽⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡾⣛⢻⣾⣿⣿⡿⣿⣾⣿⣿⣽⣾⣿⣟⣿⣿⣻⣿⣿⣷⣀⣾⢿⣿⣿⡿⣿⣿⣿⣿⣳⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣇⣿⣿⣟⣿⣿⣯⣷⣿⡿⣯⣷⣿⣿⣻⣿⣷⣿⣿⣿⣿⣿⣿⡿⣿⣿⣷⣿⣿⣿⣷⣝⢦⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⠟⣿⣹⣿⢿⣻⣷⣿⣿⣽⣿⡿⣿⡿⢛⣩⣤⣦⣭⡻⣷⣿⣿⣻⣿⢿⣷⡿⣿⣾⡿⣿⣿⣷⡝⢦⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⣿⣿⣻⣿⣿⢿⣷⣿⣻⣷⡿⣣⣾⣿⠟⠛⠻⣿⣿⣿⣿⣽⣿⢿⣿⣻⣿⡿⣷⣿⣿⢿⣿⣿⣦⠳⡄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠸⣿⣿⣿⣾⣿⣿⣽⣿⢯⣿⠟⠋⠀⠀⠀⠀⠘⣿⣿⣾⣿⣻⣿⣿⣟⣿⣿⢿⣯⣿⣿⢿⣿⣿⣧⠹⡄⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢹⣿⢿⣿⣿⣾⢟⣽⠟⠁⢀⡶⡀⠀⠀⠀⢰⣿⣿⣷⣿⢿⣟⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⣿⣿⣇⢳⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠈⡧⣾⡶⣿⡿⢭⣫⢵⠟⠁⠀⠀⣼⣿⡇⠀⠀⢠⣿⣿⣿⣾⣿⡿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣷⣿⣿⣿⣿⡈⣇⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣠⣀⠀⠀⠀⠀⢀⠞⠁⠈⢱⠀⠀⢳⡈⠻⢾⣷⠉⠒⠠⣀⠀⠀⠀⢿⣿⠀⢀⠴⠿⢿⣿⣯⣷⣿⣿⢿⣷⣿⣿⣷⡽⣿⢿⣿⣿⣿⣽⣿⣿⡇⣿⠀
⠀⠀⠀⠀⠀⢠⠞⡁⠄⠀⠙⣆⠀⡰⠃⠀⠀⡀⡼⠀⠀⠀⠙⢤⡀⠀⠀⠀⠀⠀⠉⠀⠒⠚⠃⠈⢠⣶⠀⣼⣿⣿⣿⣿⣾⣿⣿⣽⣾⣿⣷⡝⣆⠈⠛⢿⣿⣿⣿⣗⣸⡀
⠀⠀⠀⡠⠖⠾⡆⡀⠀⠀⠀⢸⠋⠀⠀⠀⣐⡤⠃⠀⠀⠀⠀⠀⠉⠲⢤⣀⠀⠀⠀⠀⠤⠄⠐⠒⣁⣤⣾⣿⣿⣿⣿⣷⣿⢿⣾⡿⣟⣿⣿⣿⠸⡆⠀⠀⠙⢿⣿⣷⢸⡇
⠀⢀⠞⡀⠁⠐⣷⠰⠀⠀⠀⠀⡄⠀⢀⠵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠽⢿⡶⣶⣶⣾⣿⡟⢻⣻⣿⠿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⡇⢿⠀⠀⠀⠀⠹⣿⢼⡃
⠀⢘⣆⠃⠀⠀⠘⣆⠆⠀⠀⠀⣇⠔⣯⡄⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⢋⠀⠀⠀⠙⠶⣽⣿⣿⣧⣆⡴⠋⠓⡬⡛⢿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⢸⡄⠀⠀⠀⠀⠈⠿⠀
⡔⠁⠘⣄⠀⠀⠀⠘⡌⠄⠀⠀⣸⢠⠰⠧⡀⠀⠀⠀⢀⣠⣖⡫⣵⠣⠁⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣷⣄⠀⠈⠊⢢⡍⠻⢿⣿⣿⣷⣿⣿⣿⣿⢘⡇⠀⠀⠀⠀⠀⠀⠀
⢧⠀⠀⠈⠂⡀⠀⠀⠈⠒⣤⠾⣡⢎⠂⢠⡗⠒⠒⠋⠅⠀⣹⣴⠇⠂⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡏⠀⢀⢠⠃⠀⠀⠉⢿⣿⣿⣽⣿⣿⢸⡇⠀⠀⠀⠀⠀⠀⠀
⢈⠷⣄⠀⠀⠈⠒⠤⡄⣴⣥⠶⠣⠟⢀⡞⡇⠀⠀⠀⣀⡴⠋⢹⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡿⠿⣛⡟⠀⠀⣊⡞⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⢸⡇⠀⠀⠀⠀⠀⠀⠀
⠸⡀⠀⠒⠀⠤⠤⣤⢳⣡⡏⠀⠀⢀⠾⠾⠖⠒⠚⠋⠁⠀⠀⢸⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣻⡇⠀⠻⢦⣀⣈⣼⡳⡄⠀⠀⠀⠀⠀⠈⢿⣿⡏⣾⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠉⠒⠦⠤⠤⠤⠞⠛⠶⠾⠒⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣦⣀⣀⣤⣾⣿⣿⣿⢿⡟⣿⠋⢆⠀⠀⠈⠉⠉⢀⡇⠀⠀⠀⠀⠀⠀⠈⢻⣟⡟⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢻⣿⣿⣿⣿⢿⣯⣿⢺⣤⣿⢦⡀⠀⠀⠰⠦⠉⢹⠦⡄⠀⠀⠀⠀⠀⠀⠀⠻⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣾⣿⣿⣿⣾⣿⣿⣿⡟⣿⡿⢄⠈⠳⠦⣤⣀⡴⠋⣱⡘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⣿⣿⣿⡍⢻⣿⣽⣿⣹⡇⠈⠠⠀⠀⠀⠉⢡⠊⢀⣹⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣽⣿⣿⡇⠈⢿⣿⣿⣷⡇⠀⠀⠀⠀⠀⠀⠀⢣⠊⠀⢸⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣟⣿⣿⣿⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣻⡇⠀⢹⣿⣾⣿⡇⠀⠀⠀⠀⠀⠐⠁⠃⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡿⣿⣿⣿⡀⠈⣿⣿⣿⣿⣤⣀⠀⠀⠀⣀⡠⠤⠚⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⣿⣿⢿⣇⠀⢸⣿⣿⢿⣷⢻⠉⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣹⣿⣿⣿⡦⠤⢿⣿⣿⣿⣧⢣⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢡⣜⣏⣿⣿⣽⣿⣦⡽⣿⣿⢿⣿⣎⢧⡌⠉⠑⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡇⠀⠈⠉⠛⠛⠛⠉⡝⠁⣰⣹⣿⣿⣿⣿⣾⣿⡗⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠒⠤⣀⠀⠀⠀⡼⡆⡀⠙⠻⠿⠿⠿⠿⠟⠋⠀⠄⡼⠧⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⣀⠴⢇⠀⠤⠐⠛⠂⠀⠑⡵⣤⢀⡀⠀⠀⠀⠀⠀⢀⣔⡉⠀⡀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⣪⣑⣈⠀⠀⠈⠫⡒⠤⠤⠤⠤⣴⣶⡇⠀⠠⠵⠂⠀⠀⠀⠀⠈⠀⢐⣠⣞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣵⣾⡿⣟⣿⣻⣷⣦⣄⠀⠑⠢⡀⠀⠘⣿⣿⣦⣄⣀⣠⣤⣤⣤⠴⠒⠉⢁⣀⣈⡙⢿⡳⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣻⢾⣽⣟⡷⣟⣾⡽⣯⣧⡀⠀⠘⣄⢂⢻⣿⣟⣿⣻⢯⣟⠟⠁⠉⠉⠉⠀⠀⠀⠀⠀⠉⠳⡙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⡿⣽⣞⣯⣿⣳⣯⢿⣻⣽⣻⣽⣻⡇⠀⢠⣇⣎⢼⣿⣿⣳⣿⣻⡟⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣾⢿⣿⣦⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡿⣯⣿⣽⢾⣻⡾⣽⢯⣿⣯⡷⠿⠷⣛⣷⣠⣃⣤⣴⣾⢯⡻⢷⣯⣿⠀⠀⠀⠀⠀⠀⢠⣾⣟⣯⣷⣟⡿⣾⡽⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⡛⠦⢭⣉⣉⣉⡩⠭⠭⠤⠖⠒⠛⣉⣉⣭⡾⠿⠛⠛⠛⢦⣙⠧⣍⣿⢀⠀⠀⠀⠀⢀⣿⣟⣾⣻⢾⣽⣻⢷⣿⣳⣯⣿⣆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠲⠤⠤⠤⠴⠒⠒⠒⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⢮⡙⠢⣈⠂⠄⠀⢸⣿⣞⣯⢿⣯⡷⣿⣻⣾⣽⣳⣯⣿⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⢤⣉⠒⠄⣿⠛⠾⢿⣻⣾⣽⢷⣟⡾⣷⣻⢷⣻⣷⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠢⢤⣉⠓⠲⠤⣉⡙⠛⠚⠛⠛⢛⣫⡵⣋⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠒⠤⠤⢭⣉⣉⣙⣩⡥⠶⠋⠀⠀⠀⠀⠀
```


## Maybe This Won't Be So Bad {.section-header background-image="images/4.png" background-size="contain" background-color="#1a1a1a"}


## I Got This {.section-header background-image="images/5.png" background-size="contain" background-color="#1a1a1a"}

## {.section-header background-image="images/1_end.png" background-size="contain" background-color="#1a1a1a" }
## {.section-header background-image="images/2_end.png" background-size="contain" background-color="#1a1a1a"}
## {.section-header background-image="images/3_end.png" background-size="contain" background-color="#1a1a1a"}
## {.section-header background-image="images/4_end.png" background-size="contain" background-color="#1a1a1a"}
## {.section-header background-image="images/5_end.png" background-size="contain" background-color="#1a1a1a"}

